
describe('Xpath', () => {
    it('Encontrar un elemento web utilizando xpath absoluto', () => {
        cy.visit('');
        cy.xpath('/html/body/div[1]/div/div/div/form/div[1]/input');
    });
    it('Encontrar un elemento web utilizando xpath relativo', () => {
        cy.visit('');
        cy.xpath("//input[@id='user']");
    });
    it('Encontrar un elemento web utilizando contains', () => {
        cy.visit('');
        cy.xpath("//input[contains(@class,'password')]");
    });
    it('Encontrar un elemento web utilizando starts-with', () => {
        cy.visit('');
        cy.xpath("//input[starts-with(@class,'chakra-input password')]");
    });
    it('Encontrar un elemento web por su texto', () => {
        cy.visit('');
        cy.xpath("//button[text()='Register']");
        cy.contains('button', 'Register');
        cy.contains('button', 'register', { matchCase: false });
    });
    it('Encontrar un elemento web combinando starts-with con el metodo text', () => {
        cy.visit('');
        cy.xpath("//p[starts-with(text(),'Si ya estás registrado')]");
    });
    it('Encontrar un elemento web combinando starts-with con el metodo text', () => {
        cy.visit('');
        cy.xpath("//p[contains(text(),'registrado')]");
    });
    it('Encontrar un elemento web utilizando descendant', () => {
        cy.visit('');
        cy.xpath("//fieldset//descendant::input[@value='Male']");
    });
    it('Encontrar un elemento web utilizando ancestor', () => {
        cy.visit('');
        cy.xpath("//input[@value='Male']//ancestor::fieldset");
    });
    it('Encontrar un elemento web utilizando preceding sibbling', () => {
        cy.visit('');
        cy.xpath("//input[@id='user']//preceding-sibling::label");
    });
    it('Encontrar un elemento web utilizando following sibling', () => {
        cy.visit('');
        cy.xpath("//label[@for='user']//following-sibling::input");
    });
});

describe('Aserciones', () => {
    let data;
    before('Before', () => {
        cy.fixture('datosFixture').then(datos => {
            data = datos;
        });
    });
    beforeEach('BeforeEach', () => {
        cy.visit('')
        cy.get('#registertoggle').dblclick();
        cy.get('#user').type(Cypress.env().usuario)
        cy.get('#pass').type(Cypress.env().contraseña)
        cy.get('#submitForm').click();
        cy.get('#waitslink').click();
    });
    it('Asercion utilizando should', () => {
        cy.get('#title').should('have.text', constants.WAITS.TITLE);
    });
    it('Asercion utilizando expect', () => {
        cy.get('#title').invoke('text').then(text => {
            expect(text).to.be.equal(constants.WAITS.TITLE);
        });
    });
    it('Asercion utilizando assert', () => {
        cy.get('#title').invoke('text').then(text => {
            assert.equal(text, constants.WAITS.TITLE)
        });
    });
    it('Validar el uso de lenght utilizando el metodo should', () => {
        cy.get('#title').should('have.length', 1) //cantidad de elementos web cuyo ID es waits
        cy.get('#title').invoke('text').should('have.length', 5) //Cantidad de caracteres en el texto del elemetno web text
    });
    it('Validar css color utilizando should', () => {
        cy.get('#title').should('have.css', 'color', constants.WAITS.COLOR);
        cy.get('#title').invoke('css', 'color').should('be.equal', constants.WAITS.COLOR);
    });
    it('Validar css color utilizando expect', () => {
        cy.get('#title').invoke('css', 'color').then(color => {
            expect(color).to.be.equal(constants.WAITS.COLOR)
        });
    });
});
